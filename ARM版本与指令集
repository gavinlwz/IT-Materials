转载：http://blog.sina.com.cn/s/blog_602f87700100kaa3.html
常常能看到ARM7，ARM9，ARM11，以及armv6k等不同的表达。且在GCC编译中，常常要用到 -march, -mcpu等。他们分别表达什么涵义呢？
Sam自己也不很清楚，只是大概有个模糊的概念。今天就仔细研究一下。

ARM（Advanced RISC Machines）是微处理器行业的一家知名企业。设计了大量高性能、廉价、耗能低的RISC处理器、相关技术及软件。
1985年，第一个ＡＲＭ原型在英国剑桥诞生。ＡＲＭ公司的特点是只设计芯片，而不生产。ARM将其技术授权给世界上许多著名的半导体、软件和OEM厂商，
每个厂商得到的都是一套独一无二的ARM相关技术及服务。利用这种合伙关系，ARM很快成为许多全球性RISC标准的缔造者。

ＡＲＭ公司定义了６种主要的指令集体系结构版本。Ｖ１－Ｖ６。（所以上面提到的ＡＲＭｖ６是指指令集版本号）。 即：ARM architecture

ＡＲＭｖ１：

该版本的原型机是ARM1，没有用于商业产品。

ＡＲＭｖ２：

对V1版进行了扩展，包含了对32位结果的乘法指令和协处理器指令的支持。

ＡＲＭｖ３：

ARM公司第一个微处理器ARM6核心是版本3的，它作为IP核、独立的处理器、具有片上高速缓存、MMU和写缓冲的集成CPU。

ＡＲＭｖ４：

当前应用最广泛的ARM指令集版本。

ARM7TDMI、ARM720T、ARM9TDMI、ARM940T、ARM920T、Intel的StrongARM等是基于ARMv4T版本。
ARMv5:

ARM9E-S、ARM966E-S、ARM1020E、ARM 1022E以及XScale是ARMv5TE的。

ARM9EJ-S、ARM926EJ-S、ARM7EJ-S、ARM1026EJ-S是基于ARMv5EJ的。

ARM10也采用。

其中后缀意义如下：

E：增强型DSP指令集。包括全部算法和16位乘法操作。

J：支持新的Java。

ARMv6:

采用ARMv6核的处理器是ARM11系列。

ARM1136J(F)-S基于ARMv6主要特性有SIMD、Thumb、Jazelle、DBX、(VFP)、MMU。

ARM1156T2(F)-S基于ARMv6T2 主要特性有SIMD、Thumb-2、(VFP)、MPU。

ARM1176JZ(F)-S基于ARMv6KZ 在 ARM1136EJ(F)-S 基础上增加MMU、TrustZone。

ARM11 MPCore基于ARMv6K 在ARM1136EJ(F)-S基础上可以包括1-4 核SMP、MMU。

ARMv7-A：
ARM处理器核：

ARM公司开发了很多ARM处理器核，最新版位ARM11。

ARM7微处理器系列
低功耗的32位RISC处理器，冯·诺依曼结构。极低的功耗，适合便携式产品。
具有嵌入式ICE－RT逻辑，调试开发方便。
3级流水线结构。能够提供0.9MIPS的三级流水线结构
代码密度高，兼容16位的Thumb指令集。
对操作系统的支持广泛，包括Windows CE、Linux、Palm OS等。
指令系统与ARM9系列、ARM9E系列和ARM10E系列兼容，便于用户的产品升级换代。
主频最高可达130MIPS。
主要应用领域：工业控制、Internet设备、网络和调制解调器设备、移动电话等多种多媒体和嵌入式应用。

ARM7TDMI微处理器
4种类型：
ARM7TDMI、ARM7TDMI-S、ARM720T、ARM7EJ。
ARM7TMDI是目前使用最广泛的32位嵌入式RISC处理器，属低端ARM处理器核。
注：“ARM核”并不是芯片，ARM核与其它部件如RAM、ROM、片内外设组合在一起才能构成现实的芯片。

 

ARM9微处理器系列
ARM9系列微处理器在高性能和低功耗特性方面提供最佳的性能。
5级整数流水线，
哈佛体系结构。
支持32位ARM指令集和16位Thumb指令集。
全性能的MMU，支持Windows CE、Linux、Palm OS等多种主流嵌入式操作系统。
支持数据Cache和指令Cache，具有更高的指令和数据处理能力。
主要应用：无线设备、仪器仪表、安全系统、机顶盒、高端打印机、数码照相机和数码摄像机。
3种类型：ARM920T、ARM922T和ARM940T。

ARM9E微处理器系列
单一处理器内核提供微控制器、DSP、Java应用系统的解决方案。
支持DSP指令集。
5级整数流水线，指令执行效率更高。
支持32位ARM指令集和16位Thumb指令集。
支持VFP9浮点处理协处理器。
全性能的MMU，支持Windows CE、Linux、Palm OS等多种主流嵌入式操作系统。
MPU支持实时操作系统。
支持数据Cache和指令Cache，
主频最高可达300MIPS。
主要应用：下一代无线设备、数字消费品、成像设备、工业控制、存储设备和网络设备等领域。
3种类型：ARM926EJ-S、ARM946E-S和ARM966E-S。

 

ARM10E微处理器系列
与同等的ARM9比较，在同样的时钟频率下，性能提高了近50%，功耗极低。
支持DSP指令集。
6级整数流水线，指令执行效率更高。
支持32位ARM指令集和16位Thumb指令集。
支持VFP10浮点处理协处理器。
全性能的MMU，支持Windows CE、Linux、Palm OS等多种主流嵌入式操作系统。
支持数据Cache和指令Cache。
主频最高可达400MIPS。
内嵌并行读/写操作部件。
主要应用：下一代无线设备、数字消费品、成像设备、工业控制、通信和信息系统等领域。
3种类型：ARM1020E、ARM1022E和ARM1026EJ-S。

SecurCore微处理器系列
专为安全需要而设计，提供了完善的32位RISC技术的安全解决方案。
灵活的保护单元，以确保操作系统和应用数据的安全。
采用软内核技术，防止外部对其进行扫描探测。
可集成用户自己的安全特性和其他协处理器。
主要应用：对安全性要求较高的应用产品及应用系统，如电子商务、电子政务、电子银行业务、网络和认证系统等领域。
4种类型：SecurCore SC100、SecurCore SC110、SecurCore SC200和SecurCore SC210。

Xscale处理器
基于ARMv5TE体系结构的解决方案，是一款全性能、高性价比、低功耗的处理器。
支持16位的Thumb指令和DSP指令集。
已使用在数字移动电话、个人数字助理和网络产品等场合。
Xscale处理器是Intel目前主要推广的一款ARM微处理器


ARM11：指令集ARMv6，8级流水线，1.25DMIPS/MHz

Cortex-A8：指令集ARMv7-A，13级整数流水线，超标量双发射，2.0DMIPS/MHz，标配Neon，不支持多核
Scorpion：指令集ARMv7-A，高通获得指令集授权后在A8的基础上设计的。13级整数流水线，超标量双发射，部分乱序执行，2.1DMIPS/MHz，标配Neon，支持多核
Cortex-A9：指令集ARMv7-A，8级整数流水线，超标量双发射，乱序执行，2.5DMIPS/MHz，可选配Neon/VFPv3，支持多核
Cortex-A5：指令集ARMv7-A，8级整数流水线，1.57DMIPS/MHz，可选配Neon/VFPv3，支持多核

Cortex-A15：指令集ARMv7-A，超标量，乱序执行，可选配Neon/VFPv4，支持多核
 

 当使用ARM toolchain时，会有-march -mcpu等。

-mcpu=

-mtune=

他们指定目标处理器（target ARM processor）。

可选的参数为：arm2', `arm250', `arm3', `arm6', `arm60', `arm600', `arm610', `arm620', `arm7', `arm7m', `arm7d', `arm7dm', `arm7di', 
`arm7dmi', `arm70', `arm700', `arm700i', `arm710', `arm710c', `arm7100', `arm7500', `arm7500fe', `arm7tdmi', `arm7tdmi-s', `arm8',
`strongarm', `strongarm110', `strongarm1100', `arm8', `arm810', `arm9', `arm9e', `arm920', `arm920t', `arm922t', `arm946e-s', 
`arm966e-s', `arm968e-s', `arm926ej-s', `arm940t', `arm9tdmi', `arm10tdmi', `arm1020t', `arm1026ej-s', `arm10e', `arm1020e', 
`arm1022e', `arm1136j-s', `arm1136jf-s', `mpcore', `mpcorenovfp', `arm1176jz-s', `arm1176jzf-s', `xscale', `iwmmxt', 
`ep9312'，Cortex-A8， Cortex-A9


-march=

 target ARM architecture。 目标处理器架构。

`armv2', `armv2a', `armv3', `armv3m', `armv4', `armv4t', `armv5', `armv5t', `armv5te', `armv6', `armv6j', `iwmmxt', `ep9312'. armv7-a等。


==========GCC官方
-mcpu=processor[+extension…]
This option specifies the target processor. The assembler will issue an error message if an attempt is made to assemble an instruction which will not execute on the target processor. The following processor names are recognized: arm1, arm2, arm250, arm3, arm6, arm60, arm600, arm610, arm620, arm7, arm7m, arm7d, arm7dm, arm7di, arm7dmi, arm70, arm700, arm700i, arm710, arm710t, arm720, arm720t, arm740t, arm710c, arm7100, arm7500, arm7500fe, arm7t, arm7tdmi, arm7tdmi-s, arm8, arm810, strongarm, strongarm1, strongarm110, strongarm1100, strongarm1110, arm9, arm920, arm920t, arm922t, arm940t, arm9tdmi, fa526 (Faraday FA526 processor), fa626 (Faraday FA626 processor), arm9e, arm926e, arm926ej-s, arm946e-r0, arm946e, arm946e-s, arm966e-r0, arm966e, arm966e-s, arm968e-s, arm10t, arm10tdmi, arm10e, arm1020, arm1020t, arm1020e, arm1022e, arm1026ej-s, fa606te (Faraday FA606TE processor), fa616te (Faraday FA616TE processor), fa626te (Faraday FA626TE processor), fmp626 (Faraday FMP626 processor), fa726te (Faraday FA726TE processor), arm1136j-s, arm1136jf-s, arm1156t2-s, arm1156t2f-s, arm1176jz-s, arm1176jzf-s, mpcore, mpcorenovfp, cortex-a5, cortex-a7, cortex-a8, cortex-a9, cortex-a15, cortex-a17, cortex-a32, cortex-a35, cortex-a53, cortex-a55, cortex-a57, cortex-a72, cortex-a73, cortex-a75, cortex-a76, cortex-a76ae, cortex-a77, ares, cortex-r4, cortex-r4f, cortex-r5, cortex-r7, cortex-r8, cortex-r52, cortex-m35p, cortex-m33, cortex-m23, cortex-m7, cortex-m4, cortex-m3, cortex-m1, cortex-m0, cortex-m0plus, exynos-m1, marvell-pj4, marvell-whitney, neoverse-n1, xgene1, xgene2, ep9312 (ARM920 with Cirrus Maverick coprocessor), i80200 (Intel XScale processor) iwmmxt (Intel XScale processor with Wireless MMX technology coprocessor) and xscale. The special name all may be used to allow the assembler to accept instructions valid for any ARM processor.

In addition to the basic instruction set, the assembler can be told to accept various extension mnemonics that extend the processor using the co-processor instruction space. For example, -mcpu=arm920+maverick is equivalent to specifying -mcpu=ep9312.

Multiple extensions may be specified, separated by a +. The extensions should be specified in ascending alphabetical order.

Some extensions may be restricted to particular architectures; this is documented in the list of extensions below.

Extension mnemonics may also be removed from those the assembler accepts. This is done be prepending no to the option that adds the extension. Extensions that are removed should be listed after all extensions which have been added, again in ascending alphabetical order. For example, -mcpu=ep9312+nomaverick is equivalent to specifying -mcpu=arm920.

The following extensions are currently supported: crc crypto (Cryptography Extensions for v8-A architecture, implies fp+simd), dotprod (Dot Product Extensions for v8.2-A architecture, implies fp+simd), fp (Floating Point Extensions for v8-A architecture), fp16 (FP16 Extensions for v8.2-A architecture, implies fp), fp16fml (FP16 Floating Point Multiplication Variant Extensions for v8.2-A architecture, implies fp16), idiv (Integer Divide Extensions for v7-A and v7-R architectures), iwmmxt, iwmmxt2, xscale, maverick, mp (Multiprocessing Extensions for v7-A and v7-R architectures), os (Operating System for v6M architecture), predres (Execution and Data Prediction Restriction Instruction for v8-A architectures, added by default from v8.5-A), sb (Speculation Barrier Instruction for v8-A architectures, added by default from v8.5-A), sec (Security Extensions for v6K and v7-A architectures), simd (Advanced SIMD Extensions for v8-A architecture, implies fp), virt (Virtualization Extensions for v7-A architecture, implies idiv), pan (Privileged Access Never Extensions for v8-A architecture), ras (Reliability, Availability and Serviceability extensions for v8-A architecture), rdma (ARMv8.1 Advanced SIMD extensions for v8-A architecture, implies simd) and xscale.

-march=architecture[+extension…]
This option specifies the target architecture. The assembler will issue an error message if an attempt is made to assemble an instruction which will not execute on the target architecture. The following architecture names are recognized: armv1, armv2, armv2a, armv2s, armv3, armv3m, armv4, armv4xm, armv4t, armv4txm, armv5, armv5t, armv5txm, armv5te, armv5texp, armv6, armv6j, armv6k, armv6z, armv6kz, armv6-m, armv6s-m, armv7, armv7-a, armv7ve, armv7-r, armv7-m, armv7e-m, armv8-a, armv8.1-a, armv8.2-a, armv8.3-a, armv8-r, armv8.4-a, armv8.5-a, armv8-m.base, armv8-m.main, armv8.1-m.main, iwmmxt, iwmmxt2 and xscale. If both -mcpu and -march are specified, the assembler will use the setting for -mcpu.

The architecture option can be extended with a set extension options. These extensions are context sensitive, i.e. the same extension may mean different things when used with different architectures. When used together with a -mfpu option, the union of both feature enablement is taken. See their availability and meaning below:

For armv5te, armv5texp, armv5tej, armv6, armv6j, armv6k, armv6z, armv6kz, armv6zk, armv6t2, armv6kt2 and armv6zt2:

+fp: Enables VFPv2 instructions. +nofp: Disables all FPU instrunctions.

For armv7:

+fp: Enables VFPv3 instructions with 16 double-word registers. +nofp: Disables all FPU instructions.

For armv7-a:

+fp: Enables VFPv3 instructions with 16 double-word registers. +vfpv3-d16: Alias for +fp. +vfpv3: Enables VFPv3 instructions with 32 double-word registers. +vfpv3-d16-fp16: Enables VFPv3 with half precision floating-point conversion instructions and 16 double-word registers. +vfpv3-fp16: Enables VFPv3 with half precision floating-point conversion instructions and 32 double-word registers. +vfpv4-d16: Enables VFPv4 instructions with 16 double-word registers. +vfpv4: Enables VFPv4 instructions with 32 double-word registers. +simd: Enables VFPv3 and NEONv1 instructions with 32 double-word registers. +neon: Alias for +simd. +neon-vfpv3: Alias for +simd. +neon-fp16: Enables VFPv3, half precision floating-point conversion and NEONv1 instructions with 32 double-word registers. +neon-vfpv4: Enables VFPv4 and NEONv1 with Fused-MAC instructions and 32 double-word registers. +mp: Enables Multiprocessing Extensions. +sec: Enables Security Extensions. +nofp: Disables all FPU and NEON instructions. +nosimd: Disables all NEON instructions.

For armv7ve:

+fp: Enables VFPv4 instructions with 16 double-word registers. +vfpv4-d16: Alias for +fp. +vfpv3-d16: Enables VFPv3 instructions with 16 double-word registers. +vfpv3: Enables VFPv3 instructions with 32 double-word registers. +vfpv3-d16-fp16: Enables VFPv3 with half precision floating-point conversion instructions and 16 double-word registers. +vfpv3-fp16: Enables VFPv3 with half precision floating-point conversion instructions and 32 double-word registers. +vfpv4: Enables VFPv4 instructions with 32 double-word registers. +simd: Enables VFPv4 and NEONv1 with Fused-MAC instructions and 32 double-word registers. +neon-vfpv4: Alias for +simd. +neon: Enables VFPv3 and NEONv1 instructions with 32 double-word registers. +neon-vfpv3: Alias for +neon. +neon-fp16: Enables VFPv3, half precision floating-point conversion and NEONv1 instructions with 32 double-word registers. double-word registers. +nofp: Disables all FPU and NEON instructions. +nosimd: Disables all NEON instructions.

For armv7-r:

+fp.sp: Enables single-precision only VFPv3 instructions with 16 double-word registers. +vfpv3xd: Alias for +fp.sp. +fp: Enables VFPv3 instructions with 16 double-word registers. +vfpv3-d16: Alias for +fp. +vfpv3xd-fp16: Enables single-precision only VFPv3 and half floating-point conversion instructions with 16 double-word registers. +vfpv3-d16-fp16: Enables VFPv3 and half precision floating-point conversion instructions with 16 double-word registers. +idiv: Enables integer division instructions in ARM mode. +nofp: Disables all FPU instructions.

For armv7e-m:

+fp: Enables single-precision only VFPv4 instructions with 16 double-word registers. +vfpvf4-sp-d16: Alias for +fp. +fpv5: Enables single-precision only VFPv5 instructions with 16 double-word registers. +fp.dp: Enables VFPv5 instructions with 16 double-word registers. +fpv5-d16": Alias for +fp.dp. +nofp: Disables all FPU instructions.

For armv8-m.main:

+dsp: Enables DSP Extension. +fp: Enables single-precision only VFPv5 instructions with 16 double-word registers. +fp.dp: Enables VFPv5 instructions with 16 double-word registers. +nofp: Disables all FPU instructions. +nodsp: Disables DSP Extension.

For armv8.1-m.main:

+dsp: Enables DSP Extension. +fp: Enables single and half precision scalar Floating Point Extensions for Armv8.1-M Mainline with 16 double-word registers. +fp.dp: Enables double precision scalar Floating Point Extensions for Armv8.1-M Mainline, implies +fp. +mve: Enables integer only M-profile Vector Extension for Armv8.1-M Mainline, implies +dsp. +mve.fp: Enables Floating Point M-profile Vector Extension for Armv8.1-M Mainline, implies +mve and +fp. +nofp: Disables all FPU instructions. +nodsp: Disables DSP Extension. +nomve: Disables all M-profile Vector Extensions.

For armv8-a:

+crc: Enables CRC32 Extension. +simd: Enables VFP and NEON for Armv8-A. +crypto: Enables Cryptography Extensions for Armv8-A, implies +simd. +sb: Enables Speculation Barrier Instruction for Armv8-A. +predres: Enables Execution and Data Prediction Restriction Instruction for Armv8-A. +nofp: Disables all FPU, NEON and Cryptography Extensions. +nocrypto: Disables Cryptography Extensions.

For armv8.1-a:

+simd: Enables VFP and NEON for Armv8.1-A. +crypto: Enables Cryptography Extensions for Armv8-A, implies +simd. +sb: Enables Speculation Barrier Instruction for Armv8-A. +predres: Enables Execution and Data Prediction Restriction Instruction for Armv8-A. +nofp: Disables all FPU, NEON and Cryptography Extensions. +nocrypto: Disables Cryptography Extensions.

For armv8.2-a and armv8.3-a:

+simd: Enables VFP and NEON for Armv8.1-A. +fp16: Enables FP16 Extension for Armv8.2-A, implies +simd. +fp16fml: Enables FP16 Floating Point Multiplication Variant Extensions for Armv8.2-A, implies +fp16. +crypto: Enables Cryptography Extensions for Armv8-A, implies +simd. +dotprod: Enables Dot Product Extensions for Armv8.2-A, implies +simd. +sb: Enables Speculation Barrier Instruction for Armv8-A. +predres: Enables Execution and Data Prediction Restriction Instruction for Armv8-A. +nofp: Disables all FPU, NEON, Cryptography and Dot Product Extensions. +nocrypto: Disables Cryptography Extensions.

For armv8.4-a:

+simd: Enables VFP and NEON for Armv8.1-A and Dot Product Extensions for Armv8.2-A. +fp16: Enables FP16 Floating Point and Floating Point Multiplication Variant Extensions for Armv8.2-A, implies +simd. +crypto: Enables Cryptography Extensions for Armv8-A, implies +simd. +sb: Enables Speculation Barrier Instruction for Armv8-A. +predres: Enables Execution and Data Prediction Restriction Instruction for Armv8-A. +nofp: Disables all FPU, NEON, Cryptography and Dot Product Extensions. +nocryptp: Disables Cryptography Extensions.

For armv8.5-a:

+simd: Enables VFP and NEON for Armv8.1-A and Dot Product Extensions for Armv8.2-A. +fp16: Enables FP16 Floating Point and Floating Point Multiplication Variant Extensions for Armv8.2-A, implies +simd. +crypto: Enables Cryptography Extensions for Armv8-A, implies +simd. +nofp: Disables all FPU, NEON, Cryptography and Dot Product Extensions. +nocryptp: Disables Cryptography Extensions.

-mfpu=floating-point-format
This option specifies the floating point format to assemble for. The assembler will issue an error message if an attempt is made to assemble an instruction which will not execute on the target floating point unit. The following format options are recognized: softfpa, fpe, fpe2, fpe3, fpa, fpa10, fpa11, arm7500fe, softvfp, softvfp+vfp, vfp, vfp10, vfp10-r0, vfp9, vfpxd, vfpv2, vfpv3, vfpv3-fp16, vfpv3-d16, vfpv3-d16-fp16, vfpv3xd, vfpv3xd-d16, vfpv4, vfpv4-d16, fpv4-sp-d16, fpv5-sp-d16, fpv5-d16, fp-armv8, arm1020t, arm1020e, arm1136jf-s, maverick, neon, neon-vfpv3, neon-fp16, neon-vfpv4, neon-fp-armv8, crypto-neon-fp-armv8, neon-fp-armv8.1 and crypto-neon-fp-armv8.1.

In addition to determining which instructions are assembled, this option also affects the way in which the .double assembler directive behaves when assembling little-endian code.

The default is dependent on the processor selected. For Architecture 5 or later, the default is to assemble for VFP instructions; for earlier architectures the default is to assemble for FPA instructions.

-mfp16-format=format
This option specifies the half-precision floating point format to use when assembling floating point numbers emitted by the .float16 directive. The following format options are recognized: ieee, alternative. If ieee is specified then the IEEE 754-2008 half-precision floating point format is used, if alternative is specified then the Arm alternative half-precision format is used. If this option is set on the command line then the format is fixed and cannot be changed with the float16_format directive. If this value is not set then the IEEE 754-2008 format is used until the format is explicitly set with the float16_format directive.

-mthumb
This option specifies that the assembler should start assembling Thumb instructions; that is, it should behave as though the file starts with a .code 16 directive.

-mthumb-interwork
This option specifies that the output generated by the assembler should be marked as supporting interworking. It also affects the behaviour of the ADR and ADRL pseudo opcodes.

-mimplicit-it=never
-mimplicit-it=always
-mimplicit-it=arm
-mimplicit-it=thumb
The -mimplicit-it option controls the behavior of the assembler when conditional instructions are not enclosed in IT blocks. There are four possible behaviors. If never is specified, such constructs cause a warning in ARM code and an error in Thumb-2 code. If always is specified, such constructs are accepted in both ARM and Thumb-2 code, where the IT instruction is added implicitly. If arm is specified, such constructs are accepted in ARM code and cause an error in Thumb-2 code. If thumb is specified, such constructs cause a warning in ARM code and are accepted in Thumb-2 code. If you omit this option, the behavior is equivalent to -mimplicit-it=arm.

-mapcs-26
-mapcs-32
These options specify that the output generated by the assembler should be marked as supporting the indicated version of the Arm Procedure. Calling Standard.

-matpcs
This option specifies that the output generated by the assembler should be marked as supporting the Arm/Thumb Procedure Calling Standard. If enabled this option will cause the assembler to create an empty debugging section in the object file called .arm.atpcs. Debuggers can use this to determine the ABI being used by.

-mapcs-float
This indicates the floating point variant of the APCS should be used. In this variant floating point arguments are passed in FP registers rather than integer registers.

-mapcs-reentrant
This indicates that the reentrant variant of the APCS should be used. This variant supports position independent code.

-mfloat-abi=abi
This option specifies that the output generated by the assembler should be marked as using specified floating point ABI. The following values are recognized: soft, softfp and hard.

-meabi=ver
This option specifies which EABI version the produced object files should conform to. The following values are recognized: gnu, 4 and 5.

-EB
This option specifies that the output generated by the assembler should be marked as being encoded for a big-endian processor.

Note: If a program is being built for a system with big-endian data and little-endian instructions then it should be assembled with the -EB option, (all of it, code and data) and then linked with the --be8 option. This will reverse the endianness of the instructions back to little-endian, but leave the data as big-endian.

-EL
This option specifies that the output generated by the assembler should be marked as being encoded for a little-endian processor.

-k
This option specifies that the output of the assembler should be marked as position-independent code (PIC).

--fix-v4bx
Allow BX instructions in ARMv4 code. This is intended for use with the linker option of the same name.

-mwarn-deprecated
-mno-warn-deprecated
Enable or disable warnings about using deprecated options or features. The default is to warn.

-mccs
Turns on CodeComposer Studio assembly syntax compatibility mode.

-mwarn-syms
-mno-warn-syms
Enable or disable warnings about symbols that match the names of ARM instructions. The default is to warn.
