一：struct对齐
  来看四个重要的基本概念：

     1) 数据类型自身的对齐值：char型数据自身对齐值为1字节，short型数据为2字节，int/float型为4字节，double型为8字节。

     2) 结构体或类的自身对齐值：其成员中自身对齐值最大的那个值。

     3) 指定对齐值：#pragma pack (value)时的指定对齐值value。

     4) 数据成员、结构体和类的有效对齐值：自身对齐值和指定对齐值中较小者，即有效对齐值=min{自身对齐值，当前指定的pack值}。

     基于上面这些值，就可以方便地讨论具体数据结构的成员和其自身的对齐方式。

     其中，有效对齐值N是最终用来决定数据存放地址方式的值。有效对齐N表示“对齐在N上”，即该数据的“存放起始地址%N=0”。而数据结构中的数据变量都是按定义的先后顺序存放。第一个数据变量的起始地址就是数据结构的起始地址。结构体的成员变量要对齐存放，结构体本身也要根据自身的有效对齐值圆整(即结构体成员变量占用总长度为结构体有效对齐值的整数倍)。
规则:

　　第一,编译器按照成员列表的顺序给每个成员分配内存.
　　第二,当成员需要满足正确的边界对齐时,成员之间用额外字节填充.
　　第三,结构体的首地址必须满足结构体中边界要求最为严格的数据类型所要求的地址.
　　第四,结构体的大小为其最宽基本类型的整数倍.

 
